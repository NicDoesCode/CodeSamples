<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>Simple microphone example</title>
        <style>
            body {
                font-family: sans-serif;
                font-size: 9pt; 
            }
        </style>
    </head> 
    <body>
        
        <h1>Simple microphone example</h1>
        <p>Relays sound from your microphone using WebRTC.<p>
        <p><em>This example might not work on Chrome unless viewed over a HTTPS connection.</em><p>
        <button id="btnStartMonitoring">Start</button>
        <button id="btnStopMonitoring">Stop</button>
        
        <script>

            // Create our audio context object 
            // - Webkit still requires the audio context to be prefixed.
            var audioContext = new (window.AudioContext || window.webKitAudioContext)();
            
            // // This variable will hold the source stream that we create from the WebRTC source
            var webRtcSource; 
            
            // Handler for 'Start' button 'onclick' event
            function handle_startMonitoring() {
                // At the time of writing browsers still require prefixing to use 'navigator.getUserMedia'  
                navigator.getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
                // Call get 'getUserMedia' asking for access to an audio source 
                navigator.getUserMedia(
                    { audio: true, video: false }, 
                    function (mediaStream) {
                        // On success we return a WebRTC media stream
                        // createMediaStreamSource will create an audio source node that wraps the MediaStream 
                        webRtcSource = audioContext.createMediaStreamSource(mediaStream);
                        // Connect this source directly to the audio destination (your speakers)
                        webRtcSource.connect(audioContext.destination);
                    }, 
                    function (error) {
                        console.log("There was an error when getting microphone input: " + err);
                    }
                );
            }

            // Handler for 'Stop' button 'onclick' event
            function handle_stopMonitoring() {
                // Close off the audio context by calling disconnect on the input source
                // The browser will dispose disconnected input sources
                webRtcSource.disconnect(); 
                webRtcSource = null; 
            }
            
            document.querySelector("#btnStartMonitoring").onclick = handle_startMonitoring; // Wire up start button
            document.querySelector("#btnStopMonitoring").onclick = handle_stopMonitoring; // Wire up stop button 

        </script>

    </body>
</html>